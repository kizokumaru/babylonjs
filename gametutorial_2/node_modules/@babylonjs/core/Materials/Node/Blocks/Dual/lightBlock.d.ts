import { NodeMaterialBlock } from '@babylonjs/core/Materials/Node/nodeMaterialBlock';
import { NodeMaterialBuildState } from '@babylonjs/core/Materials/Node/nodeMaterialBuildState';
import { NodeMaterialConnectionPoint } from '@babylonjs/core/Materials/Node/nodeMaterialBlockConnectionPoint';
import { AbstractMesh } from '../../../../Meshes/abstractMesh';
import { NodeMaterial, NodeMaterialDefines } from '@babylonjs/core/Materials/Node/nodeMaterial';
import { Effect } from '@babylonjs/core/Materials/effect';
import { Mesh } from '../../../../Meshes/mesh';
import { Light } from '@babylonjs/core/Lights/light';
import { Nullable } from '@babylonjs/core/types';
import { Scene } from '../../../../scene';
import "@babylonjs/core/Shaders/ShadersInclude/lightFragmentDeclaration";
import "@babylonjs/core/Shaders/ShadersInclude/lightUboDeclaration";
import "@babylonjs/core/Shaders/ShadersInclude/lightFragment";
import "@babylonjs/core/Shaders/ShadersInclude/helperFunctions";
import "@babylonjs/core/Shaders/ShadersInclude/lightsFragmentFunctions";
import "@babylonjs/core/Shaders/ShadersInclude/shadowsFragmentFunctions";
import "@babylonjs/core/Shaders/ShadersInclude/shadowsVertex";
/**
 * Block used to add light in the fragment shader
 */
export declare class LightBlock extends NodeMaterialBlock {
    private _lightId;
    /**
     * Gets or sets the light associated with this block
     */
    light: Nullable<Light>;
    /**
     * Create a new LightBlock
     * @param name defines the block name
     */
    constructor(name: string);
    /**
     * Gets the current class name
     * @returns the class name
     */
    getClassName(): string;
    /**
     * Gets the world position input component
     */
    get worldPosition(): NodeMaterialConnectionPoint;
    /**
     * Gets the world normal input component
     */
    get worldNormal(): NodeMaterialConnectionPoint;
    /**
    * Gets the camera (or eye) position component
    */
    get cameraPosition(): NodeMaterialConnectionPoint;
    /**
    * Gets the glossiness component
    */
    get glossiness(): NodeMaterialConnectionPoint;
    /**
    * Gets the glossinness power component
    */
    get glossPower(): NodeMaterialConnectionPoint;
    /**
    * Gets the diffuse color component
    */
    get diffuseColor(): NodeMaterialConnectionPoint;
    /**
    * Gets the specular color component
    */
    get specularColor(): NodeMaterialConnectionPoint;
    /**
    * Gets the view matrix component
    */
    get view(): NodeMaterialConnectionPoint;
    /**
     * Gets the diffuse output component
     */
    get diffuseOutput(): NodeMaterialConnectionPoint;
    /**
     * Gets the specular output component
     */
    get specularOutput(): NodeMaterialConnectionPoint;
    /**
     * Gets the shadow output component
     */
    get shadow(): NodeMaterialConnectionPoint;
    autoConfigure(material: NodeMaterial): void;
    prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines): void;
    updateUniformsAndSamples(state: NodeMaterialBuildState, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines, uniformBuffers: string[]): void;
    bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh): void;
    private _injectVertexCode;
    protected _buildBlock(state: NodeMaterialBuildState): this | undefined;
    serialize(): any;
    _deserialize(serializationObject: any, scene: Scene, rootUrl: string): void;
}
